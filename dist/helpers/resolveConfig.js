"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,s,o){void 0===o&&(o=s),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,o){void 0===o&&(o=s),e[o]=t[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.hasOwnProperty.call(e,s)&&__createBinding(t,e,s);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.resolveConfig=void 0;const transloco_utils_1=require("@ngneat/transloco-utils"),chalk_1=__importDefault(require("chalk")),fs=__importStar(require("fs")),path=__importStar(require("path")),defaultConfig_1=require("../defaultConfig"),scopes_1=require("../keysBuilder/scopes"),messages_1=require("../messages"),logger_1=require("./logger"),isDirectory_1=require("./isDirectory"),resolveProjectBasePath_1=require("./resolveProjectBasePath"),updateScopesMap_1=require("./updateScopesMap");function resolveConfig(e){const{projectBasePath:t,projectType:s}=resolveProjectBasePath_1.resolveProjectBasePath(e.project),o=defaultConfig_1.defaultConfig(s),i=transloco_utils_1.getConfig(e.config||t),r=Object.assign(Object.assign({},flatFileConfig(i)),e),a=Object.assign(Object.assign({},o),r);return logger_1.devlog("config","Config",{Default:o,"Transloco file":flatFileConfig(i),Inline:e,Merged:a}),resolveConfigPaths(a,t),validateDirectories(a),logger_1.devlog("paths","Configuration Paths",{Input:a.input,Output:a.output,Translations:a.translationsPath}),updateScopesMap_1.updateScopesMap({input:a.input}),logger_1.devlog("scopes","Scopes",{"Scopes map":scopes_1.getScopes().scopeToAlias}),Object.assign(Object.assign({},a),{scopes:scopes_1.getScopes()})}function flatFileConfig(e){const t=e.keysManager||{},{rootTranslationsPath:s,langs:o,scopePathMap:i}=e;t.input&&(t.input=Array.isArray(t.input)?t.input:t.input.split(","));const r=Object.assign({},t);return s&&(r.translationsPath=s),o&&(r.langs=o),i&&(r.scopePathMap=i),r}function resolveConfigPaths(e,t){const s=e=>path.resolve(process.cwd(),t,e);e.input=e.input.map(s),["output","translationsPath"].forEach(t=>{e[t]=s(e[t])})}function validateDirectories({input:e,translationsPath:t,command:s}){let o=!1;const i=(e,t)=>{const s=fs.existsSync(e)?messages_1.messages.pathIsNotDir:messages_1.messages.pathDoesntExists;console.log(chalk_1.default.bgRed.black(`${t} ${s}`))};for(const t of e)isDirectory_1.isDirectory(t)||(o=!0,i(t,"Input"));"find"!==s||isDirectory_1.isDirectory(t)||(o=!0,i(t,"Translations path")),o&&process.exit()}exports.resolveConfig=resolveConfig;