"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateScopesMap=void 0;const tsquery_1=require("@phenomnomnominal/tsquery"),glob=__importStar(require("glob")),scopes_1=require("../keysBuilder/scopes"),readFile_1=require("./readFile"),toCamelCase_1=require("./toCamelCase"),base="ObjectLiteralExpression:has(PropertyAssignment > Identifier[name=TRANSLOCO_SCOPE]) PropertyAssignment:has(Identifier[name=/useValue|useFactory/])",useStringQuery=`${base} > StringLiteral`,useObjectQuery=`${base} > ObjectLiteralExpression`;function updateScopesMap({input:e,files:t}){const r=t||e.map(e=>glob.sync(`${e}/**/*.ts`)).flat(),s={};for(const e of r){const t=readFile_1.readFile(e);if(!1===t.includes("TRANSLOCO_SCOPE"))continue;let r={};const i=tsquery_1.tsquery.ast(t),o=tsquery_1.tsquery(i,useStringQuery);if(0===o.length){const e=tsquery_1.tsquery(i,useObjectQuery);for(const t of e)for(const e of t.properties)if(e.initializer){const t=e.name.text;"scope"!==t&&"alias"!==t||(r[t]=e.initializer.text)}}else r.scope=o[0].text;let{scope:a,alias:n}=r;a&&!1===scopes_1.hasScope(a)&&(n||(n=toCamelCase_1.toCamelCase(a)),scopes_1.addScope(a,n),s[n]=a)}return s}exports.updateScopesMap=updateScopesMap;